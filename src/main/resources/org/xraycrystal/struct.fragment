#version 330 core

uniform vec3 lightDir;

in vec3 vColor;
//smooth in vec3 normal;

out vec4 outColor;

float Ns = 100;
vec4 mat_specular=vec4(1.0);
vec4 light_specular=vec4(1.0);

void main() {
    vec3 L = normalize(lightDir);
    // calculate normal from texture coordinates
    vec3 N;
    N.xy = gl_PointCoord* 2.0 - vec2(1.0);
    float mag = dot(N.xy, N.xy);
    if (mag > 1.0) discard;   // kill pixels outside circle
    N.z = sqrt(1.0-mag);

    // calculate lighting
    vec4 ambient = vec4(vColor*0.4, 1.0);

    float diffuse = max(0.0, dot(N,L));
    vec4 iDiff = vec4(vColor, 1.0) * clamp(diffuse, 0.0, 1.0);


    vec3 eye = vec3 (0.0, 0.0, 1.0);
    vec3 R = normalize(-reflect(L,N));
    float spec = pow(max(dot(R,eye),0.0), Ns);
    vec4 S = light_specular*mat_specular* spec;

    outColor = ambient + iDiff + S;
}